<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Dev Note by sw&#39;Lee</title>
    <link>http://localhost:1313/tags/go/</link>
    <description>Recent content in Go on Dev Note by sw&#39;Lee</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <lastBuildDate>Fri, 19 Sep 2025 15:46:30 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>make-snmprec 케이스 스터디</title>
      <link>http://localhost:1313/blog/make-snmprec-case-study/</link>
      <pubDate>Fri, 19 Sep 2025 15:46:30 +0900</pubDate>
      <guid>http://localhost:1313/blog/make-snmprec-case-study/</guid>
      <description>운영 환경에 가까운 SNMP 시뮬레이션 데이터를 재현하는 도구를 설계/구현하며, 데이터 모델·엣지 케이스·검증·CLI UX를 통해 신뢰성과 생산성을 동시에 높였습니다.</description>
    </item>
    <item>
      <title>백엔드 엔지니어를 위한 SNMP</title>
      <link>http://localhost:1313/blog/snmp-backend-engineers-guide/</link>
      <pubDate>Wed, 15 Jan 2025 13:00:00 +0900</pubDate>
      <guid>http://localhost:1313/blog/snmp-backend-engineers-guide/</guid>
      <description>백엔드 엔지니어를 위한 SNMP 실전 가이드: MIB, OID, traps vs polling의 핵심 개념과 Go를 활용한 실용적인 네트워크 모니터링 구현 방법을 소개합니다.</description>
    </item>
    <item>
      <title>Go 벤치마킹과 프로파일링 워크플로우</title>
      <link>http://localhost:1313/blog/go-benchmarking-profiling-workflow/</link>
      <pubDate>Wed, 15 Jan 2025 12:00:00 +0900</pubDate>
      <guid>http://localhost:1313/blog/go-benchmarking-profiling-workflow/</guid>
      <description>Go 성능 최적화를 위한 실전 벤치마킹과 프로파일링 워크플로우: testing, bench, pprof, flamegraphs를 활용한 성능 문제 해결과 최적화 방법을 단계별로 소개합니다.</description>
    </item>
    <item>
      <title>system-Info-collector 케이스 스터디</title>
      <link>http://localhost:1313/blog/system-info-collector-case-study/</link>
      <pubDate>Wed, 15 Jan 2025 10:00:00 +0900</pubDate>
      <guid>http://localhost:1313/blog/system-info-collector-case-study/</guid>
      <description>CPU/MEM/Disk 수집부터 신뢰성 확보까지: 샘플링, 백오프/재시도, CSV+DB 이중 로깅, 로테이션을 통한 호스트 관측성 구축 실전 가이드</description>
    </item>
    <item>
      <title>Go 네트워킹 팁: 타임아웃, 백오프, 멱등성</title>
      <link>http://localhost:1313/blog/go-networking-tips-timeouts-backoff-idempotency/</link>
      <pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/go-networking-tips-timeouts-backoff-idempotency/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;&#xA;&lt;p&gt;Go에서 안정적인 네트워크 애플리케이션을 구축하려면 적절한 타임아웃 처리, 지능적인 재시도 전략, 멱등성 연산이 필요합니다. 이 가이드는 컨텍스트/데드라인, 지수 백오프, 서킷 브레이커에 대한 필수 패턴을 실제 예제와 함께 다룹니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;배경&#34;&gt;배경&lt;/h2&gt;&#xA;&lt;p&gt;Go에서 네트워크 프로그래밍은 고유한 도전 과제를 제시합니다: 연결이 실패할 수 있고, 서비스가 일시적으로 사용 불가능할 수 있으며, 네트워크 분할이 연쇄 실패를 일으킬 수 있습니다. 적절한 안정성 패턴 없이는 애플리케이션이 취약하고 예측 불가능해집니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;문제점&#34;&gt;문제점&lt;/h2&gt;&#xA;&lt;p&gt;Go 애플리케이션에서 흔한 네트워킹 문제들:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;타임아웃 없음&lt;/strong&gt;은 연결이 멈추고 리소스 누수를 야기합니다&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;단순한 재시도&lt;/strong&gt;는 실패하는 서비스를 압도할 수 있습니다&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;비멱등성 연산&lt;/strong&gt;은 재시도 시 데이터 손상을 일으킵니다&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;서킷 브레이커 없음&lt;/strong&gt;은 연쇄 실패를 허용합니다&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;부적절한 에러 처리&lt;/strong&gt;는 디버깅을 거의 불가능하게 만듭니다&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;타임아웃-전략&#34;&gt;타임아웃 전략&lt;/h2&gt;&#xA;&lt;h3 id=&#34;데드라인과-함께하는-컨텍스트&#34;&gt;데드라인과 함께하는 컨텍스트&lt;/h3&gt;&#xA;&lt;p&gt;Go 네트워킹에서 가장 중요한 패턴은 타임아웃과 함께 &lt;code&gt;context.Context&lt;/code&gt;를 사용하는 것입니다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>개발부터 프로덕션까지 로깅 전략</title>
      <link>http://localhost:1313/blog/logging-strategy-dev-to-prod/</link>
      <pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/logging-strategy-dev-to-prod/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;목표&lt;/strong&gt;: 개발부터 프로덕션까지 확장 가능한 로깅 시스템 구축&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;핵심&lt;/strong&gt;: 구조화된 로깅, 로테이션 정책, 중앙화된 수집, 성능 최적화&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;결과&lt;/strong&gt;: 디버깅 효율성 향상, 운영 가시성 확보, 시스템 안정성 증대&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;context&#34;&gt;Context&lt;/h2&gt;&#xA;&lt;p&gt;현대의 분산 시스템에서 로깅은 단순한 디버깅 출력을 넘어서 관찰 가능성의 핵심 구성 요소입니다. 애플리케이션이 개발부터 프로덕션까지 확장되면서, 로깅 전략도 증가하는 볼륨, 복잡성, 운영 요구사항을 처리할 수 있도록 진화해야 합니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;&#xA;&lt;p&gt;대부분의 애플리케이션은 간단한 &lt;code&gt;fmt.Println&lt;/code&gt;이나 기본 로깅으로 시작하지만, 이 접근법은 프로덕션에서 문제가 됩니다:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
