<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Observability on Dev Note by sw'Lee</title><link>https://swlee3306.github.io/sulee_portfolio/tags/observability/</link><description>Recent content in Observability on Dev Note by sw'Lee</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Fri, 19 Sep 2025 15:46:30 +0900</lastBuildDate><atom:link href="https://swlee3306.github.io/sulee_portfolio/tags/observability/index.xml" rel="self" type="application/rss+xml"/><item><title>make-snmprec 케이스 스터디</title><link>https://swlee3306.github.io/sulee_portfolio/blog/make-snmprec-case-study/</link><pubDate>Fri, 19 Sep 2025 15:46:30 +0900</pubDate><guid>https://swlee3306.github.io/sulee_portfolio/blog/make-snmprec-case-study/</guid><description>운영 환경에 가까운 SNMP 시뮬레이션 데이터를 재현하는 도구를 설계/구현하며, 데이터 모델·엣지 케이스·검증·CLI UX를 통해 신뢰성과 생산성을 동시에 높였습니다.</description></item><item><title>system-Info-collector 케이스 스터디</title><link>https://swlee3306.github.io/sulee_portfolio/blog/system-info-collector-case-study/</link><pubDate>Wed, 15 Jan 2025 10:00:00 +0900</pubDate><guid>https://swlee3306.github.io/sulee_portfolio/blog/system-info-collector-case-study/</guid><description>CPU/MEM/Disk 수집부터 신뢰성 확보까지: 샘플링, 백오프/재시도, CSV+DB 이중 로깅, 로테이션을 통한 호스트 관측성 구축 실전 가이드</description></item><item><title>개발부터 프로덕션까지 로깅 전략</title><link>https://swlee3306.github.io/sulee_portfolio/blog/logging-strategy-dev-to-prod/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://swlee3306.github.io/sulee_portfolio/blog/logging-strategy-dev-to-prod/</guid><description>&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>목표&lt;/strong>: 개발부터 프로덕션까지 확장 가능한 로깅 시스템 구축&lt;/li>
&lt;li>&lt;strong>핵심&lt;/strong>: 구조화된 로깅, 로테이션 정책, 중앙화된 수집, 성능 최적화&lt;/li>
&lt;li>&lt;strong>결과&lt;/strong>: 디버깅 효율성 향상, 운영 가시성 확보, 시스템 안정성 증대&lt;/li>
&lt;/ul>
&lt;h2 id="context">Context&lt;/h2>
&lt;p>현대의 분산 시스템에서 로깅은 단순한 디버깅 출력을 넘어서 관찰 가능성의 핵심 구성 요소입니다. 애플리케이션이 개발부터 프로덕션까지 확장되면서, 로깅 전략도 증가하는 볼륨, 복잡성, 운영 요구사항을 처리할 수 있도록 진화해야 합니다.&lt;/p>
&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>대부분의 애플리케이션은 간단한 &lt;code>fmt.Println&lt;/code>이나 기본 로깅으로 시작하지만, 이 접근법은 프로덕션에서 문제가 됩니다:&lt;/p></description></item></channel></rss>